
name: release
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build + Upload
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-14
            target: aarch64-apple-darwin
            archive: tar.gz
          - os: macos-13
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            archive: zip

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Add target
        run: rustup target add ${{ matrix.target }}

      - name: Build
        run: cargo build --release -p rune-cli --target ${{ matrix.target }}

      - name: Package
        shell: bash
        run: |
          mkdir -p dist
          NAME="rune-${{ github.ref_name }}-${{ matrix.target }}"
          if [[ "${{ matrix.archive }}" == "tar.gz" ]]; then
            # Generate completions
            target/${{ matrix.target }}/release/rune completions bash > rune.bash
            target/${{ matrix.target }}/release/rune completions zsh > rune.zsh
            target/${{ matrix.target }}/release/rune completions fish > rune.fish
            target/${{ matrix.target }}/release/rune completions powershell > rune.ps1
            tar -czf dist/$NAME.tar.gz -C target/${{ matrix.target }}/release rune -C $GITHUB_WORKSPACE rune.bash rune.zsh rune.fish rune.ps1
            shasum -a 256 dist/$NAME.tar.gz > dist/$NAME.tar.gz.sha256
          else
            powershell -Command "target/${{ matrix.target }}/release/rune.exe completions bash > rune.bash"
            powershell -Command "target/${{ matrix.target }}/release/rune.exe completions zsh > rune.zsh"
            powershell -Command "target/${{ matrix.target }}/release/rune.exe completions fish > rune.fish"
            powershell -Command "target/${{ matrix.target }}/release/rune.exe completions powershell > rune.ps1"
            powershell -Command "Compress-Archive -Path target/${{ matrix.target }}/release/rune.exe,rune.bash,rune.zsh,rune.fish,rune.ps1 -DestinationPath dist/$NAME.zip"
            certutil -hashfile dist/$NAME.zip SHA256 > dist/$NAME.zip.sha256
          fi

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*

  tap:
    name: Update Homebrew Tap
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Read release assets
        id: assets
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const tag = context.ref.replace('refs/tags/', '');
            const rel = await github.rest.repos.getReleaseByTag({owner, repo, tag});
            return rel.data.assets.map(a => ({ name: a.name, url: a.browser_download_url }));

      - name: Download and compute SHA256
        id: shas
        run: |
          mkdir -p dist
          python3 - <<'PY'
import json, hashlib, os, urllib.request, sys
assets = json.loads(os.environ['ASSETS'])
out = {}
for a in assets:
    if a['name'].endswith(('.tar.gz','.zip')):
        with urllib.request.urlopen(a['url']) as r:
            data = r.read()
        out[a['name']] = hashlib.sha256(data).hexdigest()
print(json.dumps(out))
PY
        env:
          ASSETS: "${{ steps.assets.outputs.result }}"

      - name: Prepare formula
        run: |
          mkdir -p dist
          echo '${{ steps.shas.outputs.stdout }}' > dist/shas.json
          node - <<'NODE'
const fs = require('fs');
const shas = JSON.parse(fs.readFileSync('dist/shas.json','utf8'));
const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
const tag = process.env.GITHUB_REF.replace('refs/tags/','');
function url(name){ return `https://github.com/${owner}/${repo}/releases/download/${tag}/${name}`; }
const macArm = `rune-${tag}-aarch64-apple-darwin.tar.gz`;
const macX64 = `rune-${tag}-x86_64-apple-darwin.tar.gz`;
const linX64 = `rune-${tag}-x86_64-unknown-linux-gnu.tar.gz`;
const tpl = `class Rune < Formula
  desc "Rune — modern DVCS"
  homepage "https://github.com/${owner}/${repo}"
  version "${tag}"
  on_macos do
    if Hardware::CPU.arm?
      url "${url(macArm)}"
      sha256 "${shas[macArm]}"
    else
      url "${url(macX64)}"
      sha256 "${shas[macX64]}"
    end
  end
  on_linux do
    url "${url(linX64)}"
    sha256 "${shas[linX64]}"
  end
  def install
    bin.install "rune"
    bash_completion.install "rune.bash" => "rune"
    zsh_completion.install "rune.zsh" => "_rune"
    fish_completion.install "rune.fish"
  end
end`;
fs.writeFileSync('dist/rune.rb', tpl);
NODE

      - name: Checkout tap repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.TAP_REPO }}
          token: ${{ secrets.TAP_GITHUB_TOKEN }}
          path: tap

      - name: Commit formula
        run: |
          mkdir -p tap/Formula
          cp dist/rune.rb tap/Formula/rune.rb
          cd tap
          git config user.name "rune-bot"
          git config user.email "actions@users.noreply.github.com"
          git add Formula/rune.rb
          git commit -m "Rune ${{ github.ref_name }}"
          git push

  scoop:
    name: Update Scoop Manifest
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Read release assets
        id: assets
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const tag = context.ref.replace('refs/tags/', '');
            const rel = await github.rest.repos.getReleaseByTag({owner, repo, tag});
            return rel.data.assets.map(a => ({ name: a.name, url: a.browser_download_url }));

      - name: Generate manifest
        run: |
          mkdir -p dist
          node - <<'NODE'
const fs = require('fs');
const assets = JSON.parse(process.env.ASSETS);
const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
const tag = process.env.GITHUB_REF.replace('refs/tags/','');
const win = assets.find(a => a.name.endsWith('x86_64-pc-windows-msvc.zip'));
const manifest = {
  "version": tag,
  "description": "Rune — modern DVCS",
  "homepage": `https://github.com/${owner}/${repo}`,
  "license": "Apache-2.0",
  "architecture": {
    "64bit": { "url": win.url, "bin": [ "rune.exe" ] }
  }
};
fs.writeFileSync('dist/rune.json', JSON.stringify(manifest, null, 2));
NODE
        env:
          ASSETS: "${{ steps.assets.outputs.result }}"

      - name: Checkout scoop bucket
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.SCOOP_BUCKET_REPO }}
          token: ${{ secrets.SCOOP_BUCKET_TOKEN }}
          path: bucket

      - name: Commit manifest
        run: |
          mkdir -p bucket/bucket
          cp dist/rune.json bucket/bucket/rune.json
          cd bucket
          git config user.name "rune-bot"
          git config user.email "actions@users.noreply.github.com"
          git add bucket/rune.json
          git commit -m "Rune ${{ github.ref_name }}"
          git push
