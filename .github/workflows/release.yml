name: Release

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-*"  # Support alpha/beta tags

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
          - os: macos-13
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          # Commented out Windows for now to simplify
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   archive: zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cargo-cross (for cross-compilation)
        run: cargo install cross --git https://github.com/cross-rs/cross
        if: matrix.target != 'x86_64-unknown-linux-gnu' && runner.os == 'Linux'

      - name: Build (native)
        run: cargo build --release --target ${{ matrix.target }}
        if: matrix.target == 'x86_64-unknown-linux-gnu' || runner.os == 'macOS'

      - name: Build (cross-compile)  
        run: cross build --release --target ${{ matrix.target }}
        if: matrix.target != 'x86_64-unknown-linux-gnu' && runner.os == 'Linux'

      - name: Package Release
        shell: bash
        run: |
          VERSION="${{ github.ref_name }}"
          NAME="rune-${VERSION}-${{ matrix.target }}"
          
          # Create the package
          mkdir -p dist
          
          if [[ "${{ matrix.archive }}" == "tar.gz" ]]; then
            if [[ -f "target/${{ matrix.target }}/release/rune" ]]; then
              tar -czf dist/${NAME}.tar.gz -C target/${{ matrix.target }}/release rune
            else
              echo "Binary not found at target/${{ matrix.target }}/release/rune"
              ls -la target/${{ matrix.target }}/release/
              exit 1
            fi
          else
            # For Windows (if we enable it later)
            if [[ -f "target/${{ matrix.target }}/release/rune.exe" ]]; then
              cd target/${{ matrix.target }}/release
              7z a ../../../dist/${NAME}.zip rune.exe
            else
              echo "Binary not found at target/${{ matrix.target }}/release/rune.exe"
              exit 1
            fi
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: dist/rune-*.${{ matrix.archive }}
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}

  create-checksums:
    name: Create Checksums
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Download release assets
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          
      - name: Generate checksums
        run: |
          cd artifacts
          find . -name "*.tar.gz" -o -name "*.zip" | xargs sha256sum > checksums.txt
          cat checksums.txt
          
      - name: Upload checksums
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/checksums.txt
          tag_name: ${{ github.ref_name }}
