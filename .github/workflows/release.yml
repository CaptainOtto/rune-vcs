name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
          - os: macos-13
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package Release
        shell: bash
        run: |
          VERSION="${{ github.ref_name }}"
          NAME="rune-${VERSION}-${{ matrix.target }}"
          
          if [[ "${{ matrix.archive }}" == "tar.gz" ]]; then
            tar -czf ${NAME}.tar.gz -C target/${{ matrix.target }}/release rune
          else
            cd target/${{ matrix.target }}/release
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              powershell -Command "Compress-Archive -Path rune.exe -DestinationPath ../../../${NAME}.zip"
            else
              zip ../../../${NAME}.zip rune.exe
            fi
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: rune-*.${{ matrix.archive }}

  homebrew:
    name: Update Homebrew Tap
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for release
        run: sleep 120

      - name: Get Release Info
        id: release
        run: |
          VERSION="${{ github.ref_name }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Download and calculate SHA256 for macOS ARM64 build
          DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}/rune-${VERSION}-aarch64-apple-darwin.tar.gz"
          echo "download_url=${DOWNLOAD_URL}" >> $GITHUB_OUTPUT
          
          # Download the file to calculate SHA256
          curl -L -o rune-macos.tar.gz "${DOWNLOAD_URL}"
          SHA256=$(sha256sum rune-macos.tar.gz | cut -d' ' -f1)
          echo "sha256=${SHA256}" >> $GITHUB_OUTPUT

      - name: Update Homebrew Formula
        uses: actions/checkout@v4
        with:
          repository: Johan-Ott/homebrew-rune-vcs
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-tap

      - name: Create Formula
        run: |
          mkdir -p homebrew-tap/Formula
          
          cat > homebrew-tap/Formula/rune.rb << EOF
          class Rune < Formula
            desc "Rune VCS - Modern, scalable version control system"
            homepage "https://github.com/${{ github.repository }}"
            url "${{ steps.release.outputs.download_url }}"
            sha256 "${{ steps.release.outputs.sha256 }}"
            license "MIT"
            version "${{ steps.release.outputs.version }}"

            def install
              bin.install "rune"
            end

            test do
              system "#{bin}/rune", "version"
            end
          end
          EOF

      - name: Commit and Push
        run: |
          cd homebrew-tap
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Formula/rune.rb
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update rune to ${{ steps.release.outputs.version }}"
            git push
          fi
