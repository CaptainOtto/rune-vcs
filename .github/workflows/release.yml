name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  issues: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
          - os: macos-13
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package Release
        shell: bash
        run: |
          VERSION="${{ github.ref_name }}"
          NAME="rune-${VERSION}-${{ matrix.target }}"
          
          if [[ "${{ matrix.archive }}" == "tar.gz" ]]; then
            tar -czf ${NAME}.tar.gz -C target/${{ matrix.target }}/release rune
          else
            # For Windows, use PowerShell to create zip
            cd target/${{ matrix.target }}/release
            powershell -Command "Compress-Archive -Path rune.exe -DestinationPath ../../../${NAME}.zip"
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: rune-*.${{ matrix.archive }}

  homebrew:
    name: Update Homebrew Tap
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for release assets
        run: sleep 60

      - name: Create Formula File
        run: |
          VERSION="${{ github.ref_name }}"
          
          # Create a basic formula (SHA256 will be updated manually or via separate job)
          mkdir -p Formula
          cat > Formula/rune.rb << EOF
          class Rune < Formula
            desc "Rune VCS - Modern, scalable version control system"
            homepage "https://github.com/${{ github.repository }}"
            url "https://github.com/${{ github.repository }}/releases/download/${VERSION}/rune-${VERSION}-aarch64-apple-darwin.tar.gz"
            sha256 "PLACEHOLDER_SHA256"
            license "MIT"
            version "${VERSION}"

            def install
              bin.install "rune"
            end

            test do
              system "#{bin}/rune", "version"
            end
          end
          EOF

      - name: Create Release Artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: Formula/rune.rb
          tag_name: ${{ github.ref_name }}
          append_body: true
          body: |
            
            ## Installation via Homebrew
            ```bash
            # Manual installation for now:
            curl -L -o rune-${{ github.ref_name }}-aarch64-apple-darwin.tar.gz \
              "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/rune-${{ github.ref_name }}-aarch64-apple-darwin.tar.gz"
            tar -xzf rune-${{ github.ref_name }}-aarch64-apple-darwin.tar.gz
            sudo cp rune /usr/local/bin/rune
            ```
